#jinja2: trim_blocks: "true", lstrip_blocks: "true"
{% import 'libraries/network.j2' as libnetwork with context %}

config defaults
	option syn_flood	1
	option input		ACCEPT
	option output		ACCEPT
	option forward		REJECT
{% if flow_offload=="sw" %}
	option flow_offloading '1'
{% elif flow_offload=="hw" %}
	option flow_offloading '1'
	option flow_offloading_hw '1'
{% endif %}

config zone
	option name		freifunk
{% for interface in mesh_links|default([]) %}
	list   network		'{{ interface['name'] }}'
{% endfor %}
{% if mgmt is defined %}
	list   network		'mgmt'
{% endif %}
{% if sgw is defined and sgw %}
	list   device		'tunl0'
{% endif %}
	list   device		'wg_+'
	list   device		'gre+'
	option input		ACCEPT
	option output		ACCEPT
	option forward		REJECT
#	option mtu_fix          1 # mss is clamped manually in /etc/custom_fw_includes

config zone
	option name		uplink
	list   network		'uplink'
	option input		REJECT
	option output		ACCEPT
	option forward		REJECT
{% if mesh_links is defined and mesh_links|length > 0 %}
        option masq		1
{% endif %}

config forwarding
	option src		freifunk
	option dest		uplink

config forwarding
	option src		freifunk
	option dest		freifunk

# Essential gateway includes
config include
	option type 		nftables
	option path		/etc/custom_fw_includes/chain_prepend_forward_uplink_allow_unestablished_flows
	option position		chain-post
	option chain 		'forward_uplink'

config include
	option type 		nftables
	option path		/etc/custom_fw_includes/chain_prepend_forward_limit_mss
	option position		chain-prepend
	option chain 		'forward'

config include
	option type 		nftables
	option path		/etc/custom_fw_includes/table_prepend_redirect_samplicator
	option position		table-prepend

#
## Inbound to host
#

{% if 'ipv6' in uplink %}
config rule
	option name             "Allow BGP"
	option src		uplink
	option src_ip		'{{ uplink['ipv6'] | ansible.utils.ipaddr('peer')  }}'
	option proto		tcp
# Dont match on destination Port
# BGP Session is not always initiated by ourselves
#	option dest_port        179
	option target		ACCEPT
{% endif %}

config rule
	option name             "Allow conntrack sync"
	option src		uplink
{% for host in groups['role_gateway'] | difference([inventory_hostname]) | sort %}
	list src_ip		'{{ hostvars[host]['uplink']['ipv4'] | ansible.utils.ipaddr('address')  }}'
{% endfor %}
	option proto		udp
	option dest_port        {{ conntrackd_port }}
	option target		ACCEPT

config rule
	option name             "Allow SSH"
	option src		uplink
	option proto		tcp
	option dest_port        22
	option target		ACCEPT

config rule
	option name             "Allow HTTPS"
	option src		uplink
	option proto		tcp
	option dest_port        443
	option target		ACCEPT

config rule
	option name             "Allow GRE"
	option src		uplink
	option proto		gre
	option target		ACCEPT

config rule
	option name             "Allow Wireguard"
	option src		uplink
	option proto		udp
	option dest_port	'{{ wireguard_port_start }}':'{{ wireguard_port_end }}'
	option target		ACCEPT

config rule
	option name		"Allow iperf3"
	option src		uplink
	option dest_port	5201
	option target		ACCEPT

# Allow essential incoming IPv6 ICMP traffic
config rule
	option name		Allow-ICMPv6-Input
	option src		uplink
	option proto		icmp
	list icmp_type		echo-request
	list icmp_type		echo-reply
	list icmp_type		destination-unreachable
	list icmp_type		packet-too-big
	list icmp_type		time-exceeded
	list icmp_type		bad-header
	list icmp_type		unknown-header-type
	list icmp_type		router-solicitation
	list icmp_type		neighbour-solicitation
	list icmp_type		router-advertisement
	list icmp_type		neighbour-advertisement
	option limit		1000/sec
	option family		ipv6
	option target		ACCEPT


#
## Foward / Inbound to mesh
#

# Allow traffic from Internet to inbound_filtered networks unconditionally
config rule
	option name		'Accept Traffic to inbound_filtered networks'
	option src		uplink
	option dest		freifunk
	option ipset		'inbound_filtered_networks dest' # defined at EOF
	option proto		all
	option target		ACCEPT

# Dont track (Internet -> inbound_filtered_networks)
config rule
	option name		'Dont track (Internet -> inbound_filtered_networks)'
	option src		uplink
	option dest		* # see note below
	option ipset		'inbound_filtered_networks dest' # defined at EOF
	option proto		all
	option target		NOTRACK

# Dont track (Internet via GRE -> inbound_filtered_networks)
config rule
	option name		'Dont track (Internet via GRE -> inbound_filtered_networks)'
	option src		freifunk
	option dest		* # see note below
	option ipset		'inbound_filtered_networks dest' # defined at EOF
	option proto		all
	option target		NOTRACK

# Dont track (inbound_filtered_networks -> Internet + Internet via GRE)
config rule
	option name		'Dont track (inbound_filtered_networks -> Internet + Internet via GRE)'
	option src		freifunk
	option dest		* # see note below
	option ipset		'inbound_filtered_networks src'
	option proto		all
	option target		NOTRACK

# Note: option dest actually has no impact in rendered nftables config by fw4, because
# NOTRACK needs to be set on prerouting, where the outbound interface is not determined,
# but is necessary in order to let fw4 know this is a forwarding rule.

# Allow list via group_vars/role_gateway/general.yml
{% for rule in inbound_allow | default([]) %}
config rule
	option name		'{{ rule['name'] }}'
	option src		uplink
	option dest		freifunk
  {% if 'dst' in rule %}
	option dest_ip		'{{ rule['dst'] }}'
  {% endif %}
  {% if 'src' in rule %}
	option src_ip		'{{ rule['src'] }}'
  {% endif %}
	option proto		'{{ rule.get('proto', 'all') }}'
  {% if 'src_port' in rule %}
	option src_port		'{{ rule['src_port'] }}'
  {% endif %}
  {% if 'dst_port' in rule %}
	option dest_port	'{{ rule['dst_port'] }}'
  {% endif %}
	option target		ACCEPT
{% endfor %}

# Allow essential forwarded IPv6 ICMP traffic
config rule
	option name		Allow-ICMPv6-Forward
	option src		uplink
	option dest		*
	option proto		icmp
	list icmp_type		echo-request
	list icmp_type		echo-reply
	list icmp_type		destination-unreachable
	list icmp_type		packet-too-big
	list icmp_type		time-exceeded
	list icmp_type		bad-header
	list icmp_type		unknown-header-type
	option limit		10000/sec
	option family		ipv6
	option target		ACCEPT

# ipset for stateful firewall bypass
config ipset
	option name 'inbound_filtered_networks'
	option match 'net'
	option family 'ipv6'
{% for h in groups['role_corerouter'] %}
  {% set h_vars = hostvars[h] %}
  {% for network in h_vars['networks']
              | selectattr('inbound_filtering', 'defined') | selectattr('inbound_filtering')
              | selectattr('ipv6_subprefix', 'defined') %}
	list entry	'{{ h_vars['ipv6_prefix'] |  ansible.utils.ipsubnet(64, network['ipv6_subprefix']) }}' # {{ h }} - {{ libnetwork.getUciIfname(network) }}
  {% endfor %}
{% endfor %}
