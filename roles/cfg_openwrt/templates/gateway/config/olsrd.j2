#jinja2: trim_blocks: "true", lstrip_blocks: "true"
config LoadPlugin
	option library 'olsrd_arprefresh'

config LoadPlugin
	option library 'olsrd_nameservice'
	option suffix '.ff'
	option hosts_file '/tmp/hosts/olsr'
	option latlon_file '/var/run/latlon.js'
	option services_file '/var/etc/services.olsr'
{% if  mgmt['assignments'] is defined and mgmt['assignments']|length>0 %}
  {% for host, ip_num in mgmt['assignments'].items() if host != inventory_hostname %}
        list hosts '{{ mgmt['ipv4'] | ansible.utils.ipaddr(ip_num) | ansible.utils.ipaddr('address') }} {{ host }}'
  {% endfor %}
{% endif %}

config LoadPlugin
	option accept '0.0.0.0'
	option library 'olsrd_jsoninfo'
	option ignore '0'

config LoadPlugin
	option accept '0.0.0.0'
	option library 'olsrd_txtinfo'
	option port '2006'

config olsrd
	option IpVersion '4'
	option FIBMetric 'flat'
	option AllowNoInt 'yes'
	option TcRedundancy '2'
	option NatThreshold '0.75'
	option LinkQualityAlgorithm 'etx_ff'
	option Pollrate '0.025'
	option LinkQualityLevel '2'
	option OlsrPort '698'
	option Willingness '3'
	option TosValue '16'
	option RtTable '20'
	option RtTableDefault '21'
# set rule priorities to some random high numbers to make sure they are never used
# We define our own route policies in /etc/config/network
	option RtTablePriority '34000'
	option RtTableTunnelPriority '34020'
	option RtTableDefaultPriority '34030'
  {% if sgw is defined and sgw %}
	option SmartGateway 'yes'
	option SmartGatewayUplink 'both'
	option SmartGatewaySpeed '{{ sgw }}'
  {% endif %}

config InterfaceDefaults
	option MidValidityTime '500.0'
	option TcInterval '2.0'
	option HnaValidityTime '125.0'
	option HelloValidityTime '125.0'
	option TcValidityTime '500.0'
	option Ip4Broadcast '255.255.255.255'
	option MidInterval '25.0'
	option HelloInterval '3.0'
	option HnaInterval '10.0'
	option LinkQualityMult 'default 0.2'

{% if mesh_links is defined and mesh_links|length>0 %}
  {% for interface in mesh_links %}
config Interface
	option ignore '0'
	option interface '{{ interface['name'] }}'
	option Mode '{{ 'ether' if interface.get('ptp') else 'mesh' }}'
	option LinkQualityMult 'default 1.0'
  {% endfor %}
{% endif %}

{% if mgmt is defined %}
config Hna4
	option netmask '{{ mgmt['ipv4'] | ansible.utils.ipaddr('netmask') }}'
	option netaddr '{{ mgmt['ipv4'] | ansible.utils.ipaddr('network') }}'
{% endif %}

# Announce default route, its anyways not used for forwarding within BBB
# We only need it to attract traffic from legacy mesh nodes, until babel
# takes over in our core network
config Hna4
	option netmask '0.0.0.0'
	option netaddr '0.0.0.0'
