#jinja2: trim_blocks: "true", lstrip_blocks: "true"
#!/usr/sbin/nft -f
{% set profile = wireless_profiles | selectattr('name', 'equalto', wireless_profile) | list | first -%}

{# DISCLAIMER: i'm not very proud of the following. feel free to find more elegant way!
   Basically we need a list of dicts which can be used later on.
network_ifname_map =
  - network: dhcp
    ifname: wlan5-dhcp
  - ..
#}
{% set network_ifname_map = [] %}
{% for wd in wireless_devices | default([]) %}
  {% set wd_ifaces = profile['ifaces'] | default([]) | selectattr('radio', 'contains', wd['name']) %}
  {% if 'devices' in profile %}
    {% set wd_config = profile['devices'] | default([]) | selectattr('radio', 'contains', wd['name']) | first %}
  {% else %}
    {% set wd_config = {} %}
  {% endif %}
  {% set wd_ifaces = profile['ifaces'] | default([]) | selectattr('radio', 'contains', wd['name']) %}
  {% if not wd_config.get('disabled') %}
    {% for iface in wd_ifaces %}
      {% set ifname = wd['ifname_hint'] + '-' + iface['ifname_hint']|default('if' + loop.index0|string) %}
      {% if iface['mode'] == 'ap' %}
        {{ network_ifname_map.append({'network': iface['network'], 'ifname': ifname })}}
      {% elif iface['mode'] == 'mesh' %}
        {% set mesh_nets = networks | selectattr('role','defined') | selectattr('role','equalto','mesh')
          | selectattr('mesh_ap','defined') | selectattr('mesh_ap','equalto',inventory_hostname)
          | selectattr('mesh_radio','equalto', wd['name']) | selectattr('mesh_iface','equalto',iface['ifname_hint']) %}
        {% if mesh_nets | length > 0 %}
          {{ network_ifname_map.append({'network': (mesh_nets|first)['name'], 'ifname': ifname })}}
        {% endif %}
      {% endif %}
    {% endfor %}
  {% endif %}
{% endfor %}
{# DISCLAIMER SCOPE END #}

{% for network in networks | selectattr('enforce_client_isolation', 'defined') | selectattr('enforce_client_isolation') %}
  {% set name = network['name'] if 'name' in network else network['role'] %}
  {% set wifi_ifnames = network_ifname_map | selectattr('network', 'equalto', name) | map(attribute='ifname') %}
  {% if wifi_ifnames|length > 0 %}
    {% set wifi = '{ ' + wifi_ifnames | join(', ') + '}' %}
    {% set uplink = (('switch0' if dsa_ports is defined else int_port) + '.' + network['vid']|string) if role == 'ap' else '!= ' + wifi %}
    {% if loop.first %}
define gw = 02:00:00:00:00:01
define bc = ff:ff:ff:ff:ff:ff
define mc6 = 33:33:00:00:00:00/16

table bridge client_isolation
flush table bridge client_isolation
table bridge client_isolation {
    {% endif %}
	chain PREROUTING_{{ name }} {
		type filter hook prerouting priority 0; policy accept;
		{{'iif' if role == 'ap' else 'iifname' }} {{ uplink }} accept
		iifname {{ wifi }} ether daddr $bc ether daddr set $gw
		iifname {{ wifi }} ether daddr $mc6 ether daddr set $gw
		iifname {{ wifi }} ether daddr $gw accept
		iifname {{ wifi }} drop
	}
    {% if loop.last %}
}
    {% endif %}
  {% endif %}
{% endfor %}

{#
  Reflection filter

  We sometimes receive our own packets back. It happens when a location has
  two or more mesh APs which are badly isolated, use overlapping frequencies,
  or are aligned to be in each others beam. Can't be prevented 100%, happens.
  Any suitable obstacle in a single antenna's beam can cause reflections too.

  Reflections were observed in 2021 with old 2 GHz Nanostations at Emmauskirche:
  https://github.com/freifunk-berlin/bbb-configs/issues/119

  It usually works like this: corerouter transmits a packet over mesh VLAN 123,
  the respective mesh AP receives it on its bridge and transmits it out over
  the wifi mesh interface. Another mesh AP at the same location receives
  the packet on its wifi mesh interface, and through its bridge puts it
  on mesh VLAN 456, where the same corerouter receives it.

  In our setup all VLAN interfaces on the corerouter share the same MAC address.
  That means the corerouter receives a packet with its one of its own MAC
  addresses as as the source address. In more traditional network environments,
  this would be cause for concern, so Linux complains with a log message:

      switch0: received packet on lan4 with own address as source address

  It's fine in our meshy, non-traditional setup, but two things need consideration:

  1) On the corerouter, reflected packets are purely an issue of asthetics:
  it can become quite noisy in logread and drown out more important messages.

  2) Infrastructure devices (= switches) between mesh AP and corerouter might
  get confused about the same MAC address seamingly living on multiple ports.
  All devices should handle this fine because it's on separate VLANs,
  but you never know. We've seen all kinds of weird shit on cheap switches.

  So we want to avoid letting these packets back into the location.

  Our filter has nftables learn source MAC addresses from outgoing traffic
  and reject any incoming packets with a matching source MAC address.

  We do this only on the mesh AP though, because this is where we can prevent
  the reflected packet from reaching possibly wonky cheap switches.
  The filter as described works nicely on the mesh AP bridge interface covering
  the mesh VLAN and the mesh wifi interface.

  On the corerouter however, the filter would only prevent logread noise,
  and it would need to be more complex as well. Mesh wifi interfaces directly
  on the corerouter don't require a bridge over the mesh wifi interface since
  a dedicated VLAN for that mesh direction isn't required. But without
  a bridge, we somehow ended up blocking not just reflected packets, but also
  intermittently blocked our mesh neighbours. All kinds of MAC addresses
  ended up in the filter - not sure why.

  Summary: we filter reflected packets on mesh APs, but where a corerouter
  meshes on its own, using its own integrated wifi, we tolerate the log noise.
#}
{% if role == 'ap' %}
  {% for network in networks | selectattr('role', 'equalto', 'mesh') | selectattr('name','in', network_ifname_map|map(attribute='network')) %}
    {% set wifi_if = network_ifname_map | selectattr('network', 'equalto', network['name']) | map(attribute='ifname') | first %}
    {% set set_localrouter = 'localrouter_' + network['name'] %}
    {% if loop.first %}

table bridge prevent_mesh_reflection
flush table bridge prevent_mesh_reflection
table bridge prevent_mesh_reflection {
    {% endif %}
	set {{ set_localrouter }} {
		type ether_addr
		size 5
		flags timeout
	}
	chain POSTROUTING_{{ network['name'] }} {
		type filter hook postrouting priority 0; policy accept;
		oifname {{ wifi_if }} update @{{ set_localrouter }} { ether saddr timeout 1h }
	}
	chain PREROUTING_{{ network['name'] }} {
		type filter hook prerouting priority 0; policy accept;
		iifname {{ wifi_if }} ether saddr @{{ set_localrouter }} counter drop

	}
    {% if loop.last %}
}
    {% endif %}
  {% endfor %}
{% endif %}
