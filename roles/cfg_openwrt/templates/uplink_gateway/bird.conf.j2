{% if 'ipv6' in uplink %}
#loglevel syslog all;
# debug protocols all;

filter default_route {
	if ( net ~ [ ::0/0 ] ) then accept;
	reject;
}

# Attention: Safety measure below!
# First drop everything which is not in freifunk prefix and a /48
filter export_aggregates {
	if ( net !~ [ {{ freifunk_global_prefix }}{{ '{' }}{{ freifunk_wahlkreis_announcement_prefix }},{{ freifunk_wahlkreis_announcement_prefix}}{{ '}' }} ] ) then reject;
	include "/dev/shm/announcement*.bird.conf";
	accept;
}



protocol device {
}

protocol kernel kernel6 {
	ipv6 {
		export all;
		import none;
	};
}

protocol static {
	ipv6;
{% for wahlkreis in freifunk_wahlkreis_prefixes %}
  {% for no in range(0, wahlkreis | ansible.utils.ipsubnet(freifunk_wahlkreis_announcement_prefix) | int) %}
	route {{ wahlkreis | ansible.utils.ipsubnet(freifunk_wahlkreis_announcement_prefix, no) }} unreachable;
  {% endfor %}
{% endfor %}
}

protocol bgp {
	local {{ uplink['ipv6'] | ansible.utils.ipaddr('address') }} as {{ local_asn }};
	neighbor {{ uplink['ipv6'] | ansible.utils.ipaddr('peer') }} as {{ peer_asn }};
	ipv6 {
		import filter default_route;
		export filter export_aggregates;
	};
}
{% endif %}
